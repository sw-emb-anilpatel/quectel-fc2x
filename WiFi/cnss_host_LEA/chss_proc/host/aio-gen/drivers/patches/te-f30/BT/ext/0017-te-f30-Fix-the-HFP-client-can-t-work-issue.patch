From 0416028bc1885eb115dcd8f429c899693e779726 Mon Sep 17 00:00:00 2001
From: gaoxiang <gaoxiang@qti.qualcomm.com>
Date: Mon, 17 Aug 2020 13:09:29 +0800
Subject: [PATCH] te-f30: Fix the HFP client can't work issue

add HFP client verdor interface
---
 system/bt/btif/src/bluetooth.c    |  6 +++
 system/bt/btif/src/btif_hf_client.c            | 63 +++++++++++++++++++++-
 2 files changed, 67 insertions(+), 2 deletions(-)

diff --git a/system/bt/btif/src/bluetooth.c b/system/bt/btif/src/bluetooth.c
index bd1be9c..f45942c
--- a/system/bt/btif/src/bluetooth.c
+++ b/system/bt/btif/src/bluetooth.c
@@ -51,6 +51,7 @@
 #include <hardware/wipower.h>
 #endif
 
+
 #include "bt_utils.h"
 #include "btif_api.h"
 #include "btif_common.h"
@@ -75,6 +76,7 @@
 #include "l2cdefs.h"
 #include "l2c_api.h"
 #include "stack_config.h"
+#include "hardware/bt_hf_client_vendor.h"
 
 #if TEST_APP_INTERFACE == TRUE
 #include <bt_testapp.h>
@@ -101,6 +103,7 @@ bool restricted_mode = FALSE;
 extern bthf_interface_t *btif_hf_get_interface();
 /* handsfree profile - client */
 extern bthf_client_interface_t *btif_hf_client_get_interface();
+extern bthf_client_vendor_interface_t *btif_hf_client_vendor_get_interface();
 /* advanced audio profile */
 extern btav_interface_t *btif_av_get_src_interface();
 extern btav_interface_t *btif_av_get_sink_interface();
@@ -434,6 +437,9 @@ static const void* get_profile_interface (const char *profile_id)
     if (is_profile(profile_id, BT_PROFILE_HANDSFREE_CLIENT_ID))
         return btif_hf_client_get_interface();
 
+    if (is_profile(profile_id, BT_PROFILE_HANDSFREE_CLIENT_VENDOR_ID))
+        return btif_hf_client_vendor_get_interface();
+
     if (is_profile(profile_id, BT_PROFILE_SOCKETS_ID))
         return btif_sock_get_interface();
 
diff --git a/system/bt/btif/src/btif_hf_client.c b/system/bt/btif/src/btif_hf_client.c
index 5ebb965..7ad4538
--- a/system/bt/btif/src/btif_hf_client.c
+++ b/system/bt/btif/src/btif_hf_client.c
@@ -41,6 +41,7 @@
 #include "btif_profile_queue.h"
 #include "btif_util.h"
 #include "osi/include/properties.h"
+#include "hardware/bt_hf_client_vendor.h"
 
 /************************************************************************************
 **  Constants & Macros
@@ -73,6 +74,7 @@
 **  Static variables
 ************************************************************************************/
 static bthf_client_callbacks_t *bt_hf_client_callbacks = NULL;
+static bthf_client_vendor_callbacks_t *bt_hf_client_vendor_callbacks = NULL;
 static UINT32 btif_hf_client_features = 0;
 
 char btif_hf_client_version[PROPERTY_VALUE_MAX];
@@ -206,6 +208,24 @@ static bt_status_t init( bthf_client_callbacks_t* callbacks )
 
 /*******************************************************************************
 **
+** Function         btif_hf_client_vendor_init
+**
+** Description     initializes the hf client vendor interface
+**
+** Returns         bt_status_t
+**
+*******************************************************************************/
+static bt_status_t init_vendor( bthf_client_vendor_callbacks_t* callbacks )
+{
+    BTIF_TRACE_EVENT("%s", __FUNCTION__);
+
+    bt_hf_client_vendor_callbacks = callbacks;
+
+    return BT_STATUS_SUCCESS;
+}
+
+/*******************************************************************************
+**
 ** Function         connect
 **
 ** Description     connect to audio gateway
@@ -645,6 +665,24 @@ static void  cleanup( void )
 
 /*******************************************************************************
 **
+** Function        cleanup_vendor
+**
+** Description     cleans up the hf client vendor interface
+**
+** Returns         bt_status_t
+**
+*******************************************************************************/
+static bt_status_t cleanup_vendor( void )
+{
+    BTIF_TRACE_EVENT("%s", __FUNCTION__);
+
+    bt_hf_client_vendor_callbacks = NULL;
+
+    return BT_STATUS_SUCCESS;
+}
+
+/*******************************************************************************
+**
 ** Function         send_at_cmd
 **
 ** Description      Send requested AT command to rempte device.
@@ -684,6 +722,12 @@ static const bthf_client_interface_t bthfClientInterface = {
     .send_at_cmd = send_at_cmd,
 };
 
+static const bthf_client_vendor_interface_t bthfClientVendorInterface = {
+    sizeof(bthf_client_vendor_interface_t),
+    .init_vendor = init_vendor,
+    .cleanup_vendor = cleanup_vendor,
+};
+
 static void process_ind_evt(tBTA_HF_CLIENT_IND *ind)
 {
     switch (ind->type)
@@ -896,10 +940,10 @@ static void btif_hf_client_upstreams_evt(UINT16 event, char* p_param)
             HAL_CBACK(bt_hf_client_callbacks, ring_indication_cb);
             break;
         case BTA_HF_CLIENT_CGMI_EVT:
-            HAL_CBACK(bt_hf_client_callbacks, cgmi_cb, p_data->cgmi.name);
+            HAL_CBACK(bt_hf_client_vendor_callbacks, cgmi_vendor_cb, p_data->cgmi.name);
             break;
         case BTA_HF_CLIENT_CGMM_EVT:
-            HAL_CBACK(bt_hf_client_callbacks, cgmm_cb, p_data->cgmm.model);
+            HAL_CBACK(bt_hf_client_vendor_callbacks, cgmm_vendor_cb, p_data->cgmm.model);
             break;
         default:
             BTIF_TRACE_WARNING("%s: Unhandled event: %d", __FUNCTION__, event);
@@ -992,3 +1036,18 @@ const bthf_client_interface_t *btif_hf_client_get_interface(void)
     BTIF_TRACE_EVENT("%s", __FUNCTION__);
     return &bthfClientInterface;
 }
+
+/*******************************************************************************
+**
+** Function         btif_hf_client_vendor_get_interface
+**
+** Description      Get the hf client vendor callback interface
+**
+** Returns          bthf_client_vendor_interface_t
+**
+*******************************************************************************/
+const bthf_client_vendor_interface_t *btif_hf_client_vendor_get_interface(void)
+{
+    BTIF_TRACE_IMP("%s", __FUNCTION__);
+    return &bthfClientVendorInterface;
+}
-- 
2.7.4

